@page "/Users/{UserId:guid}"
@using LibraryImplementation.Web.HttpClients.Interfaces
@using LibraryImplementation.Web.ViewModels
@using Microsoft.AspNetCore.Components
@using LibraryImplementation.Web.ViewModels.User

@inject IUserHttpClient _userHttpClient;
@inject NavigationManager _navigationManager;

@if (_user != null)
{
    <EditForm Model="@_user" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary/>
        
        <div class="form-group">
            <label>Id</label>
            <input id="id" class="form-control" value="@_user.Id" readonly/>
        </div>
        <div class="form-group">
            <label>Name</label>
            <InputText id="name" class="form-control" @bind-Value="@_user.Name"/>
        </div>
        <div class="form-group">
            <label>Surname</label>
            <InputText id="name" class="form-control" @bind-Value="@_user.Surname"/>
        </div>
        <div class="form-group">
            <label>Phone Number</label>
            <InputText id="phoneNumber" class="form-control" @bind-Value="@_user.PhoneNumber"/>
        </div>
        <div class="form-group">
            <label>Address</label>
            <InputText id="address" class="form-control" @bind-Value="@_user.Address"/>
        </div>
        <div class="form-group">
            <label>Email</label>
            <InputText id="email" class="form-control" @bind-Value="@_user.Email"/>
        </div>
        <div class="form-group">
            <label>Password</label>
            <InputText id="password" class="form-control" @bind-Value="@_user.Password"/>
        </div>

        <button type="submit" class="btn btn-primary">Update</button>
        <button class="btn btn-danger float-right" @onclick="@DeleteUser">Delete</button>
    </EditForm>
}
@if (_success)
{
    <div class="alert alert-success mt-3" role="alert">
        User updated successfully
    </div>
}
@if (_error)
{
    <div class="alert alert-danger mt-3" role="alert">
        @_response.Message
    </div>
}
    
@code {
    [Parameter]
    public Guid UserId { get; set; }

    private UserViewModel _user;
    private bool _success;
    private bool _error;
    private StandardErrorResponse _response;
    
    protected override async Task OnInitializedAsync()
    {
        _user = await _userHttpClient.GetById(UserId);
    }

    private async Task HandleValidSubmit()
    {
        _response =  await _userHttpClient.Update(_user);
        HandleActionCases();
    }

    private void HandleActionCases()
    {
        if (_response == null)
        {
            _error = false;
            _success = true;
        }
        else
        {
            _success = false;
            _error = true;
        }
    }

    private async Task DeleteUser()
    {
        if(await _userHttpClient.Delete(_user.Id))
            _navigationManager.NavigateTo("Users");
    }
}